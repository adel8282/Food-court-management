/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.group7.nomnom.Admin;
import com.group7.nomnom.FileHandler;
import com.group7.nomnom.Transaction;
import com.group7.nomnom.User;
import static com.group7.nomnom.User.updateName;
import static com.group7.nomnom.User.updatePassword;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;



/**
 *
 * @author mqaid
 */
public class admin_page extends javax.swing.JFrame {
    private static final Gson gson = new Gson();
    private final User user;


    
       public admin_page(User user) {
           initComponents();
            this.user = user;
            profileUserName.setText(user.getName());
            ProfileUsernameLabel.setText(user.getUsername());
            ProfileNameLabel.setText(user.getName());
            
            ///
            
        

        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        sidebarPanel = new javax.swing.JPanel();
        manageUsersButton = new javax.swing.JButton();
        topupRequestsButton = new javax.swing.JButton();
        receiptsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        profileUserName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        managUsersPanel = new javax.swing.JPanel();
        roleComboBox = new javax.swing.JComboBox<>();
        jScrollPane11 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        createButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        nametxt = new javax.swing.JTextField();
        usernametxt = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        topupRequestsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transactionsTable = new javax.swing.JTable();
        topUpSearchBartxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        topupButton = new javax.swing.JButton();
        sortByComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        receiptsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        receiptTable = new javax.swing.JTable();
        searchReceiptButton = new javax.swing.JButton();
        receiptSearchBarTxt = new javax.swing.JTextField();
        sortByCompletedComboBox = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        ProfilePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        newName = new javax.swing.JTextPane();
        jButton6 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        currentPassword = new javax.swing.JPasswordField();
        NewPassword = new javax.swing.JPasswordField();
        repeatPassword = new javax.swing.JPasswordField();
        jButton5 = new javax.swing.JButton();
        ProfileNameLabel = new javax.swing.JLabel();
        ProfileUsernameLabel = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        container.setBackground(new java.awt.Color(255, 255, 255));
        container.setPreferredSize(new java.awt.Dimension(900, 660));
        container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imagePanel.setPreferredSize(new java.awt.Dimension(202, 178));

        imageLabel.setIcon(new javax.swing.ImageIcon("/Users/mqaid/Documents/NomNom-oms/src/main/java/assets/login logo.png")); // NOI18N
        imageLabel.setText("jLabel1");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 202, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, Short.MAX_VALUE)
        );

        container.add(imagePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        sidebarPanel.setBackground(new java.awt.Color(255, 224, 200));

        manageUsersButton.setForeground(new java.awt.Color(255, 96, 31));
        manageUsersButton.setText("Manage Users");
        manageUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageUsersButtonActionPerformed(evt);
            }
        });

        topupRequestsButton.setForeground(new java.awt.Color(255, 96, 31));
        topupRequestsButton.setText("Topup requests");
        topupRequestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topupRequestsButtonActionPerformed(evt);
            }
        });

        receiptsButton.setForeground(new java.awt.Color(255, 96, 31));
        receiptsButton.setText("Receipts");
        receiptsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptsButtonActionPerformed(evt);
            }
        });

        profileButton.setForeground(new java.awt.Color(255, 96, 31));
        profileButton.setText("profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        profileUserName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        profileUserName.setForeground(new java.awt.Color(255, 96, 31));

        jLabel1.setIcon(new javax.swing.ImageIcon("/Users/mqaid/NetBeansProjects/NomNom-oms/src/main/java/assets/user-profile.jpg")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profileUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(profileUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jButton9.setForeground(new java.awt.Color(255, 96, 31));
        jButton9.setText("Log out");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidebarPanelLayout = new javax.swing.GroupLayout(sidebarPanel);
        sidebarPanel.setLayout(sidebarPanelLayout);
        sidebarPanelLayout.setHorizontalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sidebarPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(profileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(topupRequestsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                .addComponent(receiptsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                .addComponent(manageUsersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(sidebarPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sidebarPanelLayout.setVerticalGroup(
            sidebarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(manageUsersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(topupRequestsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(receiptsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(profileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        container.add(sidebarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 200, 480));

        tabs.setBackground(new java.awt.Color(255, 255, 255));

        managUsersPanel.setBackground(new java.awt.Color(255, 255, 255));

        roleComboBox.setForeground(new java.awt.Color(255, 96, 31));
        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "role", "vendor", "customer", "courier" }));
        roleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleComboBoxActionPerformed(evt);
            }
        });

        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "name", "username", "role"
            }
        ));
        jScrollPane11.setViewportView(usersTable);

        createButton.setForeground(new java.awt.Color(255, 96, 31));
        createButton.setText("create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        deleteButton.setForeground(new java.awt.Color(255, 96, 31));
        deleteButton.setText("delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        nametxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 13), new java.awt.Color(255, 96, 31))); // NOI18N
        nametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametxtActionPerformed(evt);
            }
        });

        usernametxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 13), new java.awt.Color(255, 96, 31))); // NOI18N
        usernametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernametxtActionPerformed(evt);
            }
        });

        clearButton.setForeground(new java.awt.Color(255, 96, 31));
        clearButton.setText("clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jButton4.setText("➡");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managUsersPanelLayout = new javax.swing.GroupLayout(managUsersPanel);
        managUsersPanel.setLayout(managUsersPanelLayout);
        managUsersPanelLayout.setHorizontalGroup(
            managUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managUsersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roleComboBox, 0, 163, Short.MAX_VALUE)
                    .addComponent(usernametxt)
                    .addComponent(nametxt)
                    .addGroup(managUsersPanelLayout.createSequentialGroup()
                        .addComponent(createButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton))
                    .addGroup(managUsersPanelLayout.createSequentialGroup()
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managUsersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        managUsersPanelLayout.setVerticalGroup(
            managUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managUsersPanelLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(usernametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(managUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addComponent(clearButton)
                .addContainerGap(176, Short.MAX_VALUE))
            .addGroup(managUsersPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tabs.addTab("manage users", managUsersPanel);

        topupRequestsPanel.setBackground(new java.awt.Color(255, 255, 255));
        topupRequestsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        transactionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Transaction ID", "customer ID", "request date and time", "transaction amount"
            }
        ));
        jScrollPane1.setViewportView(transactionsTable);

        topupRequestsPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 66, 694, 347));

        topUpSearchBartxt.setForeground(new java.awt.Color(204, 204, 204));
        topUpSearchBartxt.setText("Customer ID");
        topUpSearchBartxt.setBorder(javax.swing.BorderFactory.createTitledBorder("search bar"));
        topUpSearchBartxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topUpSearchBartxtActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(topUpSearchBartxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 330, 40));

        searchButton.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        searchButton.setText("search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 80, 30));

        topupButton.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        topupButton.setForeground(new java.awt.Color(255, 96, 31));
        topupButton.setText("Top up");
        topupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topupButtonActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(topupButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, 166, 53));

        sortByComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort", "Sort by Date(oldest first)", "Sort by Date(newest first)", "Sort by Amount(highest first)", "Sort by Amount(lowest first)", "Reset" }));
        sortByComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByComboBoxActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(sortByComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 12, 160, 40));

        jButton1.setText("➡");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 470, 40, 20));

        jButton2.setText("⬅");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        topupRequestsPanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 470, 40, 20));

        tabs.addTab("Topup Requests", topupRequestsPanel);

        receiptsPanel.setBackground(new java.awt.Color(255, 255, 255));

        receiptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Transaction ID", "Customer ID", "request date and time", "completed date and time", "transaction amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(receiptTable);

        searchReceiptButton.setText("search");
        searchReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchReceiptButtonActionPerformed(evt);
            }
        });

        receiptSearchBarTxt.setForeground(new java.awt.Color(204, 204, 204));
        receiptSearchBarTxt.setText("customer ID");
        receiptSearchBarTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("search bar"));
        receiptSearchBarTxt.setPreferredSize(new java.awt.Dimension(50, 41));
        receiptSearchBarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptSearchBarTxtActionPerformed(evt);
            }
        });

        sortByCompletedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort", "Sort by Date(oldest first)", "Sort by Date(newest first)", "Sort by Amount(highest first)", "Sort by Amount(lowest first)", "Reset" }));
        sortByCompletedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByCompletedComboBoxActionPerformed(evt);
            }
        });

        jButton7.setText("➡");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton3.setText("⬅");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout receiptsPanelLayout = new javax.swing.GroupLayout(receiptsPanel);
        receiptsPanel.setLayout(receiptsPanelLayout);
        receiptsPanelLayout.setHorizontalGroup(
            receiptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(receiptsPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(searchReceiptButton)
                .addGap(32, 32, 32)
                .addComponent(receiptSearchBarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortByCompletedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, receiptsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        receiptsPanelLayout.setVerticalGroup(
            receiptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, receiptsPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(receiptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(receiptSearchBarTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchReceiptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortByCompletedComboBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(receiptsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        tabs.addTab("Receipts", receiptsPanel);

        ProfilePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("User information");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel5.setText("username");

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel12.setText("name");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("Update Name");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("New Name");

        jScrollPane7.setViewportView(newName);

        jButton6.setText("UPDATE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setText("Update  password");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("current password");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("New password");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("repeat password");

        jButton5.setText("UPDATE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        ProfileNameLabel.setText("jLabel1");

        ProfileUsernameLabel.setText("jLabel2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ProfileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProfileUsernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(currentPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(NewPassword)
                            .addComponent(repeatPassword)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel10)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ProfileUsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ProfileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel13)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(currentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(NewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(repeatPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jButton8.setText("⬅");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProfilePanelLayout = new javax.swing.GroupLayout(ProfilePanel);
        ProfilePanel.setLayout(ProfilePanelLayout);
        ProfilePanelLayout.setHorizontalGroup(
            ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfilePanelLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        ProfilePanelLayout.setVerticalGroup(
            ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProfilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        tabs.addTab("Profile", ProfilePanel);

        container.add(tabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 700, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(909, 688));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void manageUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageUsersButtonActionPerformed
                                                  
        tabs.setSelectedIndex(0);

        JsonObject data = FileHandler.readFromFile();
        JsonArray usersArray = data.getAsJsonArray("users");

        DefaultTableModel tableModel = new DefaultTableModel(
            new Object[]{"ID", "Name", "Username", "Role", "Edit"}, 0
        );

        usersTable.setModel(tableModel);

        for (JsonElement element : usersArray) {
            JsonObject user = element.getAsJsonObject();
            boolean isDeleted = user.get("is_deleted").getAsBoolean();
            String role = user.get("role").getAsString();

            // Filter to show only customers, vendors, and couriers
            if (!isDeleted && (role.equalsIgnoreCase("customer") || role.equalsIgnoreCase("vendor") || role.equalsIgnoreCase("courier"))) {  
                int id = user.get("id").getAsInt();
                String name = user.get("name").getAsString();
                String username = user.get("username").getAsString();

                Object[] row = {id, name, username, role, "Edit"};
                tableModel.addRow(row);
            }
        }

        usersTable.getColumn("Edit").setCellRenderer(new ButtonRenderer());
        usersTable.getColumn("Edit").setCellEditor(new ButtonEditor(new JCheckBox()));
    }//GEN-LAST:event_manageUsersButtonActionPerformed

    private void topupRequestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topupRequestsButtonActionPerformed
        tabs.setSelectedIndex(1);
        
        // Call Transactions by status method, to display the transactions based on their status
        JsonArray requestedTransactions = Transaction.getTransactionsByStatus("requested");
        
        // Call update transaction method to display specific columns
        updateTransactionsTable(requestedTransactions);
    

        
    }//GEN-LAST:event_topupRequestsButtonActionPerformed

    private void receiptsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptsButtonActionPerformed
        tabs.setSelectedIndex(2);
                                                           
        tabs.setSelectedIndex(2); // Switch to the Receipt tab

        // Get transactions with "completed" status
        JsonArray completedTransactions = Transaction.getTransactionsByStatus("completed");

        // Update the receipt table with completed transactions
        updateReceiptTable(completedTransactions);
        
    }//GEN-LAST:event_receiptsButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        tabs.setSelectedIndex(3);
    }//GEN-LAST:event_profileButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        nametxt.setText("");
        usernametxt.setText("");
        roleComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void usernametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernametxtActionPerformed

    private void nametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nametxtActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Get the selected row index
        int selectedRow = usersTable.getSelectedRow();

        // Check if any row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user from the table first!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the username from the table's selected row (assuming username is in column 2)
        String usernameToDelete = usersTable.getValueAt(selectedRow, 2).toString();

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete the user '" + usernameToDelete + "'?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Call the method in the Admin class to delete the user
            Admin.deleteUsers(usernameToDelete);

            // Refresh the table after deletion
            manageUsersButtonActionPerformed(null);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String name = nametxt.getText().trim();
        String username = usernametxt.getText().trim();
        String role = roleComboBox.getSelectedItem().toString();
        boolean is_deleted = false;

        if (name.isEmpty() || username.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You have not written username or name, please fill the blanks.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JsonObject data = FileHandler.readFromFile();
        if (data == null) {
            JOptionPane.showMessageDialog(this, "Error reading data!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JsonArray usersArray = data.getAsJsonArray("users");

        // Check if the username already exists
        for (JsonElement element : usersArray) {
            JsonObject User = element.getAsJsonObject();
            if (User.get("username").getAsString().equalsIgnoreCase(username) && User.get("is_deleted").getAsBoolean() == false) {
                JOptionPane.showMessageDialog(this, "Username already exists!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        //check if the admin choose role or not
        if(role.equals("role"))
        {
            JOptionPane.showMessageDialog(this, "You have not chosen a role, please choose one.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Generate a new ID
        int newId = Admin.generateNewId(usersArray);
        // Generate a new password
        String password = Admin.generatePassword(username);

        // Create the new user object
        JsonObject newUser = Admin.createUser(newId, name, username, password, role, is_deleted);

        // Add additional fields for "customer" role
        if (role.equalsIgnoreCase("customer")) {
            newUser.addProperty("location", ""); // Empty location
            newUser.addProperty("balance", 0.0); // Initial balance of 0.0
        }

        // Add the new user to the array
        usersArray.add(newUser);
        FileHandler.writeToFile(data);

        // Show success message
        JOptionPane.showMessageDialog(this, "User created successfully! Password: " + password, "Success", JOptionPane.INFORMATION_MESSAGE);
        manageUsersButtonActionPerformed(null);
    }//GEN-LAST:event_createButtonActionPerformed

    private void roleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roleComboBoxActionPerformed

    private void topUpSearchBartxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topUpSearchBartxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_topUpSearchBartxtActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
                                             
        String customerId = topUpSearchBartxt.getText().trim(); // Get input from search field

        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JsonArray customerTransactions = Transaction.getTransactionsByCustomerIdAndStatus(customerId, "requested");

            if (customerTransactions.size() == 0) {
                JOptionPane.showMessageDialog(this, "No transactions found for Customer ID: " + customerId, "Not Found", JOptionPane.INFORMATION_MESSAGE);
            } else {
                updateTransactionsTable(customerTransactions); // Display search results
                return; // Exit method if search is successful
            }
        }

        // If search fails (empty bar or no transactions found), display all transactions
        JsonArray allRequestedTransactions = Transaction.getTransactionsByStatus("requested");
        updateTransactionsTable(allRequestedTransactions);

    }//GEN-LAST:event_searchButtonActionPerformed

    private void topupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topupButtonActionPerformed

    // Get the selected row index
    int selectedRow = transactionsTable.getSelectedRow();

    // Check if any row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a transaction from the table first!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve transaction details from the selected row
    int transactionId = Integer.parseInt(transactionsTable.getValueAt(selectedRow, 0).toString());
    int customerId = Integer.parseInt(transactionsTable.getValueAt(selectedRow, 1).toString());
    double transactionAmount = Double.parseDouble(transactionsTable.getValueAt(selectedRow, 3).toString());

    // Load data from the file
    JsonObject data = FileHandler.readFromFile();
    if (data == null) {
        JOptionPane.showMessageDialog(this, "Error loading data file!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    JsonArray transactions = data.getAsJsonArray("transactions");
    JsonArray users = data.getAsJsonArray("users");

    boolean transactionUpdated = false;
    boolean userUpdated = false;

    // Find the transaction and update its status
    for (JsonElement transactionElement : transactions) {
        JsonObject transaction = transactionElement.getAsJsonObject();
        if (transaction.get("transaction_id").getAsInt() == transactionId &&
            transaction.get("transaction_status").getAsString().equals("requested")) {
            
            // Find the user by customer ID and update balance
            for (JsonElement userElement : users) {
                JsonObject user = userElement.getAsJsonObject();
                if (user.get("id").getAsInt() == customerId) {
                    double currentBalance = user.get("balance").getAsDouble();
                    user.addProperty("balance", currentBalance + transactionAmount);
                    userUpdated = true;
                    break;
                }
            }

            // Update transaction status
            transaction.addProperty("admin_id", 3);
            transaction.addProperty("transaction_status", "completed");
            transaction.addProperty("completed_date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            transactionUpdated = true;
            break;
        }
    }

    // Check if both updates were successful
    if (transactionUpdated && userUpdated) {
        FileHandler.writeToFile(data);
        JOptionPane.showMessageDialog(this, "Top-up successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
        topupRequestsButtonActionPerformed(null);// Refresh the table to show updates
    } else {
        JOptionPane.showMessageDialog(this, "Error processing the top-up!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_topupButtonActionPerformed

    private void sortByComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByComboBoxActionPerformed
        sortTransactionsByStatus("requested", sortByComboBox);
    }//GEN-LAST:event_sortByComboBoxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        tabs.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tabs.setSelectedIndex(2);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchReceiptButtonActionPerformed
        
        String customerId = receiptSearchBarTxt.getText().trim(); // Get input from search field

        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JsonArray customerTransactions = Transaction.getTransactionsByCustomerIdAndStatus(customerId, "completed");

            if (customerTransactions.size() == 0) {
                JOptionPane.showMessageDialog(this, "No completed transactions found for Customer ID: " + customerId, "Not Found", JOptionPane.INFORMATION_MESSAGE);
            } else {
                updateReceiptTable(customerTransactions); // Display search results
                return; // Exit method if search is successful
            }
        }

        // If search fails (empty bar or no transactions found), display all completed transactions
        JsonArray allCompletedTransactions = Transaction.getTransactionsByStatus("completed");
        updateReceiptTable(allCompletedTransactions);
    }//GEN-LAST:event_searchReceiptButtonActionPerformed

    private void receiptSearchBarTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptSearchBarTxtActionPerformed

    }//GEN-LAST:event_receiptSearchBarTxtActionPerformed

    private void sortByCompletedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByCompletedComboBoxActionPerformed
        sortTransactionsByStatus("completed", sortByCompletedComboBox);
    }//GEN-LAST:event_sortByCompletedComboBoxActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String newTextName = newName.getText();
        int userId = user.getId();

        // Update the user's name
        updateName(newTextName, userId);
        // Update the field to display the updated name
        String theName = User.displayUser(userId);
        ProfileNameLabel.setText(theName);      
        // Clear the input field after updating
        newName.setText("");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String username = user.getUsername();
        String currentTextPassword = currentPassword.getText();
        String newTextPassword = NewPassword.getText();
        String repeatTextPassword = repeatPassword.getText();

        updatePassword( username, currentTextPassword, newTextPassword, repeatTextPassword);
        currentPassword.setText("");
        NewPassword.setText("");
        repeatPassword.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        tabs.setSelectedIndex(1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        tabs.setSelectedIndex(3);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tabs.setSelectedIndex(1);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        tabs.setSelectedIndex(2);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
            int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to log out?", 
            "Logout Confirmation", 
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        dispose(); // Close the admin page
        new login_page().setVisible(true); // Open the login page
    }
    }//GEN-LAST:event_jButton9ActionPerformed



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admin_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admin_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admin_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admin_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField NewPassword;
    private javax.swing.JLabel ProfileNameLabel;
    private javax.swing.JPanel ProfilePanel;
    private javax.swing.JLabel ProfileUsernameLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel container;
    private javax.swing.JButton createButton;
    private javax.swing.JPasswordField currentPassword;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel managUsersPanel;
    private javax.swing.JButton manageUsersButton;
    private javax.swing.JTextField nametxt;
    private javax.swing.JTextPane newName;
    private javax.swing.JButton profileButton;
    private javax.swing.JLabel profileUserName;
    private javax.swing.JTextField receiptSearchBarTxt;
    private javax.swing.JTable receiptTable;
    private javax.swing.JButton receiptsButton;
    private javax.swing.JPanel receiptsPanel;
    private javax.swing.JPasswordField repeatPassword;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchReceiptButton;
    private javax.swing.JPanel sidebarPanel;
    private javax.swing.JComboBox<String> sortByComboBox;
    private javax.swing.JComboBox<String> sortByCompletedComboBox;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField topUpSearchBartxt;
    private javax.swing.JButton topupButton;
    private javax.swing.JButton topupRequestsButton;
    private javax.swing.JPanel topupRequestsPanel;
    private javax.swing.JTable transactionsTable;
    private javax.swing.JTextField usernametxt;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables

    // Clear fields
    private void clearFields()
    {
        nametxt.setText("");
        usernametxt.setText("");
        roleComboBox.setSelectedIndex(0);
    } 
    
    // Refresh the table
    public void refreshUsersTable() 
    {
        manageUsersButtonActionPerformed(null); // Refresh the table
    }
    
    
    ///////
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setText("Edit");
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }
    //////
    
    /////
    class ButtonEditor extends DefaultCellEditor {
        private JButton button;
        private String userId;
        private JTable table;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Edit");

            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedRow = table.getSelectedRow();
                    userId = table.getValueAt(selectedRow, 0).toString();
                    String name = table.getValueAt(selectedRow, 1).toString();
                    String username = table.getValueAt(selectedRow, 2).toString();
                    String role = table.getValueAt(selectedRow, 3).toString();

                    showEditDialog(userId, name, username, role);
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.table = table;
            return button;
        }
    }
    /////
    
    
    ////
    private void showEditDialog(String userId, String oldName, String oldUsername, String oldRole) {
        JTextField nameField = new JTextField(oldName);
        JTextField usernameField = new JTextField(oldUsername);
        JComboBox<String> roleDropdown = new JComboBox<>(new String[]{"customer", "courier", "vendor"});
        roleDropdown.setSelectedItem(oldRole);

        Object[] message = {
            "Name:", nameField,
            "Username:", usernameField,
            "Role:", roleDropdown
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Edit User", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            String newName = nameField.getText();
            String newUsername = usernameField.getText();
            String newRole = roleDropdown.getSelectedItem().toString();

            if (newRole.equals("roles")) {  // Validate Role Selection
                JOptionPane.showMessageDialog(null, "You have not chosen a role, please choose one.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            

            updateUserInDatabase(userId, newName, newUsername, newRole);
        }
    }
    ////
    
    
    ////
    private void updateUserInDatabase(String id, String newName, String newUsername, String newRole) {
        JsonObject data = FileHandler.readFromFile();
        JsonArray usersArray = data.getAsJsonArray("users");
        

        for (JsonElement element : usersArray) {
            JsonObject user = element.getAsJsonObject();
            String existingId = user.get("id").getAsString();
            String existingUsername = user.get("username").getAsString();
            

            // If the username exists and it's not the same user, block the update
            if (!existingId.equals(id) && Admin.doesUsernameExist(usersArray, newUsername)) {
                JOptionPane.showMessageDialog(null, "This username is already taken!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Proceed with updating the user if username is available
        for (JsonElement element : usersArray) {
            JsonObject user = element.getAsJsonObject();
            if (user.get("id").getAsString().equals(id)) {
                user.addProperty("name", newName);
                user.addProperty("username", newUsername);
                user.addProperty("role", newRole);

                FileHandler.writeToFile(data);
                manageUsersButtonActionPerformed(null);
                JOptionPane.showMessageDialog(null, "User updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
    }
    ////
    
    
    
    ////
        // to update the table
        private void updateTransactionsTable(JsonArray transactions) {
        DefaultTableModel model = (DefaultTableModel) transactionsTable.getModel();
        model.setRowCount(0); // Clear previous data

        for (JsonElement element : transactions) {
            JsonObject transaction = element.getAsJsonObject();
            String transactionID = transaction.get("transaction_id").getAsString();
            String customerID = transaction.get("customer_id").getAsString();
            String requestDate = transaction.get("request_date").getAsString();
            String transactionAmount = transaction.get("transaction_amount").getAsString();

            model.addRow(new Object[]{transactionID, customerID, requestDate, transactionAmount});  
            
        } 
    }
    ////
    
     
    
    ////
        // Receipt table
        private void updateReceiptTable(JsonArray transactions) {
        DefaultTableModel model = (DefaultTableModel) receiptTable.getModel();
        model.setRowCount(0); // Clear existing rows

        for (JsonElement element : transactions) {
            JsonObject transaction = element.getAsJsonObject();

            String transactionID = transaction.get("transaction_id").getAsString();
            int customerId = transaction.get("customer_id").getAsInt();
            String requestDate = transaction.get("request_date").getAsString();
            String completedDate = transaction.get("completed_date").getAsString();
            double transactionAmount = transaction.get("transaction_amount").getAsDouble();

            // Add row to the receipt table
            model.addRow(new Object[]{transactionID, customerId, requestDate, completedDate, transactionAmount});
        }
    }
    ////
        
        
        
        
    ////
        /// sort transaction and receipt
        private void sortTransactionsByStatus(String status, JComboBox<String> comboBox) {                                               
        String selectedOption = comboBox.getSelectedItem().toString(); // Get selected option
        JsonArray transactions = Transaction.getTransactionsByStatus(status); // Get transactions based on status

        if (transactions.size() == 0) {
            JOptionPane.showMessageDialog(null, "No " + status + " transactions available!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Convert JsonArray to List<JsonObject> for sorting
        List<JsonObject> transactionList = new ArrayList<>();
        for (JsonElement element : transactions) {
            transactionList.add(element.getAsJsonObject());
        }

        // Sort based on selected option
        switch (selectedOption) {
            case "Sort by Date(oldest first)":
                transactionList.sort((t1, t2) -> {
                    LocalDateTime date1 = LocalDateTime.parse(t1.get("request_date").getAsString(), 
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    LocalDateTime date2 = LocalDateTime.parse(t2.get("request_date").getAsString(), 
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    return date1.compareTo(date2); // Oldest first
                });
                break;

            case "Sort by Date(newest first)":
                transactionList.sort((t1, t2) -> {
                    LocalDateTime date1 = LocalDateTime.parse(t1.get("request_date").getAsString(), 
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    LocalDateTime date2 = LocalDateTime.parse(t2.get("request_date").getAsString(), 
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    return date2.compareTo(date1); // Newest first
                });
                break;

            case "Sort by Amount(highest first)":
                transactionList.sort((t1, t2) -> Double.compare(t2.get("transaction_amount").getAsDouble(), 
                                                                 t1.get("transaction_amount").getAsDouble()));
                break;

            case "Sort by Amount(lowest first)":
                transactionList.sort(Comparator.comparingDouble(t -> t.get("transaction_amount").getAsDouble())); // Lowest first
                break;

            case "Reset":
                // Reset to original transaction list
                transactionList.clear();
                for (JsonElement element : Transaction.getTransactionsByStatus(status)) {
                    transactionList.add(element.getAsJsonObject());
                }
                break;

            default:
                return; // Do nothing if "Sort" is selected
        }

        // Convert sorted list back to JsonArray
        JsonArray sortedTransactions = new JsonArray();
        for (JsonObject obj : transactionList) {
            sortedTransactions.add(obj);
        }

        // Update the correct table based on status
        if (status.equals("requested")) {
            updateTransactionsTable(sortedTransactions); // Updates the "Top-Up Requests" table
        } else if (status.equals("completed")) {
            updateReceiptTable(sortedTransactions); // Updates the "Receipts" table
        }
    }
    ////
    
}




